$ {
    const formatDate = (date, format) => {
        const moment = require('moment');
        return moment(date).format(format);
    };

    const fromNowDate = (date, withoutSuffix) => {
        const moment = require('moment');
        return moment(date).fromNow(withoutSuffix);
    };

    const formatBytes = (bytes, decimals) => {
        if (bytes == 0)
            return '0 Bytes';

        const k = 1024,
            dm = decimals || 2,
            sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    };

    const htmlToText = (html) => {
        return html.replace(/(\r\n|\n\r|\r|\n)/g, '<br>$1');
    };
}
import Layout from '../../layouts/layout.marko';
<${Layout} ...data>
    <@body>
<main class="downloads downloadsView">
    <h1>${data.latest ? `Latest OpenRCT2 ${data.release.longTitle} download` : `Download OpenRCT2 ${data.release.longTitle}`}</h1>
    <ul>
        <if(data.release.build)>
        <li>Build: <a href=`https://github.com/OpenRCT2/OpenRCT2/commit/${data.release.build}` title=`View commit ${data.release.build.substr(0, 7)} on GitHub` rel="nofollow" target="_blank"><span class="monospace">${data.release.build.substr(0, 7)}</span></a></li>
        </if>
        <li>Available since <span class="fromNow" data-date=data.release.published.toISOString() data-without-suffix="true" data-format="llll">${fromNowDate(data.release.published, true)}</span>: <span class="date" data-date=data.release.published.toISOString() data-format="llll">${formatDate(data.release.published, 'llll')}</span></li>
    </ul>
$ {
    const categories = {
        'windows': {
            name: 'Windows',
            icon: 'windows.svg'
        },
        'linux': {
            name: 'Linux',
            icon: 'linux.svg'
        },
        'macos': {
            name: 'macOS',
            icon: 'apple.svg'
        },
        'android': {
            name: 'Android',
            icon: 'android.svg'
        },
        'misc': {
            name: 'Miscellaneous',
            icon: 'download.svg'
        }
    };
}
    <for|categoryIdentifier, category| in=categories>
$ const assets = data.release.getAssetsByCategory(categoryIdentifier)
        <if(assets.size)>
            <h2>$!{category.icon ? `<img src="/assets/images/icons/${category.icon}" class="icon">` : ''}${category.name} downloads</h2>
            <table>
                <thead>
                    <tr>
                        <td>Variant</td>
                        <td>Filename</td>
                        <td>SHA-256 Checksum</td>
                        <td>File Size</td>
                    </tr>
                </thead>
                <tbody>
            <for|asset| of=assets>
                    <tr>
                        <td>${asset.platform ? asset.platform.charAt(0).toUpperCase() + asset.platform.slice(1) : ''} ${asset.architecture} ${asset.title}</td>
                        <td><a href=asset.url title=`Download ${asset.fileName}` class="monospace">${asset.fileName}</a></td>
                        <td title=`SHA-256 checksum: ${asset.fileHash}`><span class="monospace">${asset.fileHash.substr(0, 7)}</span>â€¦</td>
                        <td>${formatBytes(asset.fileSize)}</td>
                    </tr>
            </for>
                </tbody>
            </table>
        </if>
    </for>
    <if(data.release.notes)>
        <h2>Release notes</h2>
        <p>$!{htmlToText(data.release.notes)}</p>
    </if>
</main>
    </@body>
</>